name: Main CI - Production Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run code formatting check
      run: |
        ruff format --check .

    - name: Run linting
      run: |
        ruff check .

    - name: Run type checking
      run: |
        mypy src/

    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=src/aifand --cov-report=term-missing --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  build-package:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build Python package
      run: |
        python -m build

    - name: Verify package integrity
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install project dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install safety bandit

    - name: Run security scan on project dependencies only
      run: |
        # Create requirements.txt from installed packages for scanning
        pip freeze > requirements.txt
        # Try safety scan first, fall back to pip-audit if it fails due to auth issues
        safety scan --target . --output json --save-as json safety-report.json || {
          echo "Safety scan failed, trying pip-audit as fallback"
          pip install pip-audit
          pip-audit --format=json --output=safety-report.json || echo "Security scanning completed with warnings"
        }
        
    - name: Run security scan on our code (blocking)
      run: |
        # Scan our source code for security issues - this SHOULD fail the build
        # Skip tests/ to avoid false positives from assert statements
        bandit -r src/ -f json -o bandit-report.json
        echo "âœ“ No security issues found in our code"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json